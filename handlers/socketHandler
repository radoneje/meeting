
const stripHtml = require("string-strip-html");
const io= require('socket.io')

var langArr=[]

class socket{
    constructor(server, knex){
        this.knex=knex;
        this.clients=require('./clientsHandler')
        //this.emit=this.clients.sendToRoomUsers;
        this.io=require('socket.io')(server, {path:"/meeting/socket"} );
        this.io.binaryType = 'arraybuffer';
        var  _this=this;
        this.io.on('connection', async (socket)=> {
            console.log("connected!!!")
            var id=null;
            var meetid=null;
            var client=null;
            var user=null;

            setTimeout(()=>{
                if(user && meetid)
                _this.clients.sendToRoomUsers("userLogin", {user:user},meetid)
            },1000)
            socket.on("hello",async ( data)=>{

                var users=await knex.select("*").from("t_eventusers").where({id:data.userid})
                meetid=data.meetid;
                user=users[0];
                delete user.smsCode;
                client={
                    socket:socket,
                    user:users[0],
                    meetid:data.meetid,
                }

                id=_this.clients.add(client)
                client.id=id;
                setTimeout(async ()=>{
                    _this.clients.clients.forEach(e=>{
                        if(e.isActive &&  meetid==data.meetid)
                            socket.emit("userLogin", {user:e.user})
                    })



                    var res = await this.knex.select("*")
                        .from("v_meetchat")
                        .where({meetid:data.meetid})
                        .orderBy("date")
                        .limit(50);
                    socket.emit("chatAdd", res,data.meetid)
                }, 2000)
            })


            socket.on("disconnect",(msg,  data)=>{
                console.log("disconnect",id);
              //  if(id)
                    _this.clients.disActive(socket.id);

                if(user && meetid)
                    _this.clients.sendToRoomUsers("userLogOut", {user:user},meetid)

                langArr.forEach(lang=>{
                    if(lang.socketid==socket.id) {
                        lang.isActive=false
                        _this.clients.sendToRoomUsers("langChClose", lang, meetid)
                    }
                })



            });
            socket.on("selfVideoStarted",(msg,  data)=>{
                if(id)
                       _this.clients.startVideo(id, socket.id)
            });
            socket.on("newStream",(data)=>{
                var cls=_this.clients.clients.filter(c=>c.socket.id==socket.id);
                if(cls.length>0){
                    cls[0].streamData.push(data);
                    _this.clients.sendToRoomUsers("newStream", data,cls[0].meetid)
                }
                //msg, datamsg, data
            })
            socket.on("newLangCh",(data)=>{
                var cls=_this.clients.clients.filter(c=>c.socket.id==socket.id);
                if(cls.length>0) {
                    data.isActive = true;
                    data.socketid=socket.id;
                    langArr.push(data)
                    _this.clients.sendToRoomUsers("newLangCh", data, cls[0].meetid)
                }
            });
            socket.on("langChClose",(data)=>{
                var cls=_this.clients.clients.filter(c=>c.socket.id==socket.id);
                if(cls.length>0) {
                    data.isActive = true;
                    langArr.forEach(l=>{
                        if(l.id=data.id)
                            l.isActive = false;
                    })
                    _this.clients.sendToRoomUsers("langChClose", data, cls[0].meetid)
                }
            });



            socket.on("closeStream",(data)=>{
                var cls=_this.clients.clients.filter(c=>c.socket.id==socket.id);
                if(cls.length>0){
                    cls[0].streamData=cls[0].streamData.filter(r=>r.streamid!=data.streamid);
                    _this.clients.sendToRoomUsers("closeStream", data,cls[0].meetid)
                }
                //msg, datamsg, data
            })
            socket.on("getMeetingVideos",(data)=>{

                var arr=this.clients.clients.filter(c=>{
                    return c.isActive && c.streamData.length>0});
                var i=0;
                arr.forEach(c=>{
                    i++;
                    setTimeout(()=>{
                        try {
                            c.streamData.forEach(d=>{
                                socket.emit("newStream", d)
                            })

                        }catch (e) {
                            console.warn("error send new stream")
                        }
                    },0*500*i )

                })
                arr.forEach(c=>{
                    i++;
                    setTimeout(()=>{
                        try {
                            langArr.forEach(lang=>{
                                if(lang.isActive)
                                    socket.emit("newLangCh", lang)
                            })

                        }catch (e) {
                            console.warn("error send new stream")
                        }
                    },0*600*i)

                });

            })
            socket.on("chatAdd",async (data)=>{

                data.text=urlify(stripHtml( data.text))
                data.date=new Date();
                data.userid=client.user.id;
                var res=await this.knex("t_meetchat").insert(data,"*");
                 res = await this.knex.select("*").from("v_meetchat").where({id: res[0].id});
                _this.clients.sendToRoomUsers("chatAdd", res,data.meetid)
            })
            socket.on("chatFileUpload",async (data)=>{
                console.log("chatFileUpload", data.id);
                var res = await this.knex.select("*").from("v_meetchat").where({id: data.id});
                _this.clients.sendToRoomUsers("chatAdd", res,data.meetid)
            })





        });
    }
}
function urlify(text) {
    var urlRegex = /(https?:\/\/[^\s]+)/g;
    return text.replace(urlRegex, function (url) {
        return '&nbsp;<a href="' + url + '" target="_blank">' + url + '</a>&nbsp;';
    })
    // or alternatively
    // return text.replace(urlRegex, '<a href="$1">$1</a>')
}
module.exports = socket;